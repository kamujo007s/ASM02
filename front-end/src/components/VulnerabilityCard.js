//VulnerabilityCard.js
import React, { useState } from "react";
import moment from "moment";
import { Card, Button, ConfigProvider, theme } from "antd";

const VulnerabilityCard = ({ vulnerability }) => {
  const [showDetails, setShowDetails] = useState(false);

  const toggleDetails = () => {
    setShowDetails(!showDetails);
  };

  return (
    <ConfigProvider
      theme={{
        algorithm: theme.defaultAlgorithm, // Use default (light) theme
        token: {
          colorPrimary: "#1890ff", // สีหลักตามธีมที่คุณเลือก
          borderRadius: 2, // ปรับ border-radius เป็น 2px
          colorBgContainer: "#ffffff", // พื้นหลังสีขาว
          colorTextBase: "#1f1f1f", // สีข้อความเป็นสีดำ
        },
      }}
    >
      <Card
        title={vulnerability.assetName}
        bordered={false}
        style={{
          width: "30%",
          marginRight: "1.5%",
          marginBottom: "20px",
          backgroundColor: "#ffffff", // พื้นหลังสีขาว
          color: "#1f1f1f", // สีข้อความเป็นสีดำ
          textAlign: "left", // Align text to the left
        }}
      >
        <h6 style={{ color: "#aaa", textAlign: "left" }}>
          CVSS Score {vulnerability.cvssVersion}:{" "}
          {vulnerability.cvssScore !== "N/A"
            ? vulnerability.cvssScore
            : "No CVSS Score available"}
        </h6>
        <p style={{ textAlign: "left" }}>
          <strong>Risk Level:</strong>{" "}
          <span
            style={{
              color: vulnerability.riskLevel !== "Unknown" ? "#fa8c16" : "#aaa",
            }}
          >
            {vulnerability.riskLevel !== "Unknown"
              ? vulnerability.riskLevel
              : "No Risk Level available"}
          </span>
        </p>
        <Button type="link" onClick={toggleDetails} style={{ textAlign: "left" }}>
          {showDetails ? "Hide Details" : "Show Details"}
        </Button>
        {showDetails && (
          <div className="mt-3" style={{ color: "#1f1f1f", textAlign: "left" }}>
            <p>
              <strong>Description:</strong>{" "}
              {vulnerability.descriptions.find((desc) => desc.lang === "en")
                ?.value || "No description available"}
            </p>
            <p>
              <strong>Operating System:</strong>{" "}
              {`${vulnerability.operating_system} ${vulnerability.os_version}`}
            </p>
            <p>
              <strong>Published:</strong>{" "}
              {moment(vulnerability.published).isValid()
                ? moment(vulnerability.published).format("YYYY-MM-DD")
                : "Invalid Date"}
            </p>
            <p>
              <strong>Last Modified:</strong>{" "}
              {moment(vulnerability.lastModified).isValid()
                ? moment(vulnerability.lastModified).format("YYYY-MM-DD")
                : "Invalid Date"}
            </p>
            <a
              href={`https://nvd.nist.gov/vuln/detail/${vulnerability.cveId}`}
              target="_blank"
              rel="noopener noreferrer"
              style={{ color: "#fa8c16" }}
            >
              View More
            </a>
          </div>
        )}
      </Card>
    </ConfigProvider>
  );
};

export default VulnerabilityCard;