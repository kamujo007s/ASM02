import React, { useState, useEffect, useContext } from 'react';
import axios from 'axios';
import { ConfigProvider, Row, Col, Card } from 'antd';
import { AuthContext } from '../context/AuthContext'; // นำเข้า AuthContext
import RiskBarChart from './Graphs/RiskBarChart';
import RiskPieChart from './Graphs/RiskPieChart';
import RiskLineChart from './Graphs/RiskLineChart';

const VulnerabilityDashboard = () => {
  const { auth } = useContext(AuthContext); // ใช้ AuthContext
  const [summary, setSummary] = useState([]);
  const [assetsDataOverTime, setAssetsDataOverTime] = useState([]);
  const [groupedSummary, setGroupedSummary] = useState({});

  useEffect(() => {
    fetchSummary();
    fetchAssetsOverTime();
  }, []);

  const fetchSummary = async () => {
    try {
      const response = await axios.get('http://192.168.123.180:3012/cve/vulnerability-summary', {
        headers: {
          'Authorization': `Bearer ${auth.token}` // เพิ่ม token ใน header
        }
      });

      setSummary(response.data);
      setGroupedSummary(groupByOS(response.data));
    } catch (error) {
      console.error('Error fetching summary:', error);
    }
  };

  const fetchAssetsOverTime = async () => {
    try {
      const response = await axios.get('http://192.168.123.180:3012/cve/asset-over-time', {
        headers: {
          'Authorization': `Bearer ${auth.token}` // เพิ่ม token ใน header
        }
      });

      setAssetsDataOverTime(response.data);
    } catch (error) {
      console.error('Error fetching assets over time:', error);
    }
  };

  const groupByOS = (summaryData) => {
    const grouped = {};
    summaryData.forEach((item) => {
      const { operating_system, os_version, riskLevels, totalCount } = item;
      if (!grouped[operating_system]) {
        grouped[operating_system] = [];
      }
      grouped[operating_system].push({ os_version, riskLevels, totalCount });
    });
    return grouped;
  };

  return (
    <ConfigProvider
      theme={{
        token: {
          colorPrimary: "#1677ff",
          colorInfo: "#1677ff",
          colorTextBase: "#000000",
          colorBgBase: "#ffffff",
          borderRadius: 6,
          wireframe: false,
        },
      }}
    >
      <div className="container mt-5" style={{ color: '#1f1f1f', margin: '2% 5%' }}>
        <h3>Vulnerability Risk Summary by OS and Version</h3>
        <Row gutter={[24, 24]} style={{ marginBottom: '40px' }}>
          {Object.keys(groupedSummary).map((osName) => (
            <Col span={24} key={osName}>
              <Card title={osName} bordered={false} style={{ backgroundColor: '#fff' }}>
                <Row gutter={[16, 16]}>
                  {groupedSummary[osName].map(({ os_version, riskLevels, totalCount }, index) => (
                    <Col key={index} span={8}>
                      <h6>{os_version ? `Version: ${os_version}` : 'Unknown Version'}</h6>
                      <Row gutter={[8, 16]}>
                        <Col span={12}>
                          <RiskBarChart riskLevels={riskLevels} osName={osName} version={os_version} />
                        </Col>
                        <Col span={12}>
                          <RiskPieChart riskLevels={riskLevels} />
                        </Col>
                      </Row>
                      <p style={{ marginTop: '16px' }}>
                        <strong>Total Vulnerabilities:</strong> {totalCount}
                      </p>
                    </Col>
                  ))}
                </Row>
              </Card>
            </Col>
          ))}
        </Row>
        <div style={{ marginTop: '40px', marginBottom: '60px' }}>
          <h3>Asset Count Over Time</h3>
          <Card bordered={false} style={{ backgroundColor: '#fff' }}>
            <RiskLineChart assetsDataOverTime={assetsDataOverTime} />
          </Card>
        </div>
      </div>
    </ConfigProvider>
  );
};

export default VulnerabilityDashboard;