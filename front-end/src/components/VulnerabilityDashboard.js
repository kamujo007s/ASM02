import React, { useState, useEffect } from 'react';
import axios from 'axios';
import RiskBarChart from './Graphs/RiskBarChart';
import RiskPieChart from './Graphs/RiskPieChart'; // Pie Chart
import RiskLineChart from './Graphs/RiskLineChart'; // Line Chart
import { Card, Row, Col, ConfigProvider, theme } from 'antd';

const VulnerabilityDashboard = () => {
  const [summary, setSummary] = useState([]);
  const [assetsDataOverTime, setAssetsDataOverTime] = useState([]);  // ตั้งค่าเริ่มต้นเป็น array ว่างเปล่า
  const [groupedSummary, setGroupedSummary] = useState({});

  useEffect(() => {
    fetchSummary();
    fetchAssetsOverTime();  // เรียกฟังก์ชันเพื่อดึงข้อมูล Asset ตามช่วงเวลา
  }, []);

  const fetchSummary = async () => {
    try {
      const response = await axios.get('http://192.168.123.133:3012/cve/vulnerability-summary');
      const sortedSummary = response.data.sort((a, b) => {
        if (a.operating_system === b.operating_system) {
          return a.os_version.localeCompare(b.os_version);
        }
        return a.operating_system.localeCompare(b.operating_system);
      });

      const grouped = groupByOS(sortedSummary);
      setGroupedSummary(grouped);
    } catch (error) {
      console.error('Error fetching vulnerability summary:', error);
    }
  };

  const fetchAssetsOverTime = async () => {
    try {
      const response = await axios.get('http://192.168.123.133:3012/cve/asset-over-time');  // แก้ไขเส้นทางเป็น /assets-over-time
      setAssetsDataOverTime(response.data);  // เก็บข้อมูล Asset ตามช่วงเวลา
    } catch (error) {
      console.error('Error fetching asset data over time:', error);
    }
  };

  const groupByOS = (summaryData) => {
    const grouped = {};
    summaryData.forEach(({ operating_system, riskLevels, totalCount, os_version }) => {
      if (!grouped[operating_system]) {
        grouped[operating_system] = [];
      }
      grouped[operating_system].push({ os_version, riskLevels, totalCount });
    });
    return grouped;
  };

  return (
    <ConfigProvider
      theme={{
        algorithm: theme.darkAlgorithm,
        token: {
          colorPrimary: "#f5222d",
          colorInfo: "#a970f9",
          colorSuccess: "#a970f9"
        },
      }}
    >
      <div className="container mt-5" style={{ color: '#fff' }}>
        <h3>Vulnerability Risk Summary by OS and Version</h3>
        <Row gutter={[16, 16]}>
          {Object.keys(groupedSummary).map((osName) => (
            <Col span={24} key={osName}>
              <Card title={osName} bordered={false} style={{ backgroundColor: '#1f1f1f' }}>
                <Row gutter={[16, 16]}>
                  {groupedSummary[osName].map(({ os_version, riskLevels, totalCount }, index) => (
                    <Col key={index} span={8}>
                      <h6>{os_version ? `Version: ${os_version}` : 'Unknown Version'}</h6>
                      <RiskBarChart riskLevels={riskLevels} osName={osName} version={os_version} />
                      <RiskPieChart riskLevels={riskLevels} />
                      <p style={{ marginTop: '16px' }}>
                        <strong>Total Vulnerabilities:</strong> {totalCount}
                      </p>
                    </Col>
                  ))}
                </Row>
              </Card>
            </Col>
          ))}
        </Row>

        {/* เพิ่ม Line Chart เพื่อแสดงข้อมูล Asset ตามเวลา */}
        <div style={{ marginTop: '40px' }}>
          <h3>Asset Count Over Time</h3>  {/* เปลี่ยนชื่อหัวข้อให้ตรงกับข้อมูล */}
          <RiskLineChart assetsDataOverTime={assetsDataOverTime} />  {/* ส่ง assetsDataOverTime ไปยัง Line Chart */}
        </div>
      </div>
    </ConfigProvider>
  );
};

export default VulnerabilityDashboard;
