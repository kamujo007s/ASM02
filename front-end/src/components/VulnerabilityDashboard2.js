//VunerabilityDashboard2.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Row, Col, Card, ConfigProvider, theme } from 'antd';
import TopWeaknessesChart from './Charts/TopWeaknessesChart';
import VulnerabilityByOSBarChart from './Charts/VulnerabilityByOSBarChart';
import UnpatchedVulnerabilitiesTable from './Charts/UnpatchedVulnerabilitiesTable';
import ImpactScoreBarChart from './Charts/ImpactScoreBarChart';
import VulnerabilitiesByAssetTable from './Charts/VulnerabilitiesByAssetTable';
import CVEDetailsTable from './Charts/CVEDetailsTable';
import CVSSBarChart from './Charts/CVSSBarChart';
import VulnerabilityOverTimeLineChart from './Charts/VulnerabilityOverTimeLineChart';
import AttackVectorPieChart from './Charts/AttackVectorPieChart';


const VulnerabilityDashboard2 = () => {
  const [cvssData, setCvssData] = useState([]);
  const [vulnerabilitiesOverTime, setVulnerabilitiesOverTime] = useState([]);
  const [cweData, setCweData] = useState([]);
  const [osData, setOsData] = useState([]);
  const [unpatchedData, setUnpatchedData] = useState([]);
  const [attackVectorData, setAttackVectorData] = useState([]);
  const [impactData, setImpactData] = useState([]);
  const [assetVulnerabilityData, setAssetVulnerabilityData] = useState([]);
  const [cveDetailsData, setCveDetailsData] = useState([]);

  useEffect(() => {
    fetchCvssData();
    fetchVulnerabilitiesOverTime();
    fetchCweData();
    fetchOsData();
    fetchUnpatchedData();
    fetchAttackVectorData();
    fetchImpactData();
    fetchAssetVulnerabilityData();
    fetchCveDetailsData();
  }, []);

  const fetchCvssData = async () => {
    const token = localStorage.getItem('token');
    const response = await axios.get('http://192.168.1.164:3012/cve/cvss-data', {
      headers: { Authorization: `Bearer ${token}` },
    });
    setCvssData(response.data);
  };

  const fetchVulnerabilitiesOverTime = async () => {
    const token = localStorage.getItem('token');
    const response = await axios.get('http://192.168.1.164:3012/cve/asset-over-time', {
      headers: { Authorization: `Bearer ${token}` },
    });
    setVulnerabilitiesOverTime(response.data);
  };

  const fetchCweData = async () => {
    const token = localStorage.getItem('token');
    const response = await axios.get('http://192.168.1.164:3012/cve/cwe-breakdown', {
      headers: { Authorization: `Bearer ${token}` },
    });
    setCweData(response.data);
  };

  const fetchOsData = async () => {
    const token = localStorage.getItem('token');
    const response = await axios.get('http://192.168.1.164:3012/cve/vulnerability-summary', {
      headers: { Authorization: `Bearer ${token}` },
    });
    setOsData(response.data);
  };

  const fetchUnpatchedData = async () => {
    const token = localStorage.getItem('token');
    const response = await axios.get('http://192.168.1.164:3012/cve/unpatched-products', {
      headers: { Authorization: `Bearer ${token}` },
    });
    setUnpatchedData(response.data);
  };

  const fetchAttackVectorData = async () => {
    const token = localStorage.getItem('token');
    const response = await axios.get('http://192.168.1.164:3012/cve/attack-vector', {
      headers: { Authorization: `Bearer ${token}` },
    });
    setAttackVectorData(response.data);
  };

  const fetchImpactData = async () => {
    const token = localStorage.getItem('token');
    const response = await axios.get('http://192.168.1.164:3012/cve/impact-score', {
      headers: { Authorization: `Bearer ${token}` },
    });
    setImpactData(response.data);
  };

  const fetchAssetVulnerabilityData = async () => {
    const token = localStorage.getItem('token');
    const response = await axios.get('http://192.168.1.164:3012/cve/asset-vulnerabilities', {
      headers: { Authorization: `Bearer ${token}` },
    });
    setAssetVulnerabilityData(response.data);
  };

  const fetchCveDetailsData = async () => {
    const token = localStorage.getItem('token');
    const response = await axios.get('http://192.168.1.164:3012/cve/cve-details', {
      headers: { Authorization: `Bearer ${token}` },
    });
    setCveDetailsData(response.data || []); // กำหนดค่าเริ่มต้นเป็น []
  };

  return (
    <ConfigProvider theme={{ algorithm: theme.defaultAlgorithm }}>
      <div className="container mt-5" style={{ color: '#1f1f1f', margin: '2% 5%' }}>
        <Row gutter={[24, 24]}>
          <Col span={12}>
            <Card title="Vulnerability Severity by CVSS Score" bordered={false}>
              <CVSSBarChart cvssData={cvssData} />
            </Card>
          </Col>
          <Col span={12}>
            <Card title="Vulnerabilities Over Time" bordered={false}>
              <VulnerabilityOverTimeLineChart vulnerabilitiesData={vulnerabilitiesOverTime} />
            </Card>
          </Col>
        </Row>

        <Row gutter={[24, 24]}>
          <Col span={12}>
            <Card title="Top Weaknesses (CWE)" bordered={false}>
              <TopWeaknessesChart cweData={cweData} />
            </Card>
          </Col>
          <Col span={12}>
            <Card title="Vulnerability Distribution by OS" bordered={false}>
              <VulnerabilityByOSBarChart osData={osData} />
            </Card>
          </Col>
        </Row>

        <Row gutter={[24, 24]}>
          <Col span={12}>
            <Card title="Unpatched Vulnerabilities" bordered={false}>
              <UnpatchedVulnerabilitiesTable unpatchedData={unpatchedData} />
            </Card>
          </Col>
          <Col span={12}>
            <Card title="Attack Vector Distribution" bordered={false}>
              <AttackVectorPieChart vectorData={attackVectorData} />
            </Card>
          </Col>
        </Row>

        <Row gutter={[24, 24]}>
          <Col span={12}>
            <Card title="Impact Score Analysis" bordered={false}>
              <ImpactScoreBarChart impactData={impactData} />
            </Card>
          </Col>
          <Col span={12}>
            <Card title="Vulnerabilities by Asset" bordered={false}>
              <VulnerabilitiesByAssetTable assetVulnerabilityData={assetVulnerabilityData} />
            </Card>
          </Col>
        </Row>

        <Row gutter={[24, 24]}>
          <Col span={24}>
            <Card title="CVE Details" bordered={false}>
              <CVEDetailsTable cveDetailsData={cveDetailsData} />
            </Card>
          </Col>
        </Row>
      </div>
    </ConfigProvider>
  );
};

export default VulnerabilityDashboard2;
