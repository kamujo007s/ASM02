import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import axios from "axios";
import {
  Card,
  ConfigProvider,
  theme,
  List,
  Typography,
  Row,
  Col,
  Divider,
} from "antd";
import moment from "moment";

const { Title, Text, Link, Paragraph } = Typography;

const VulnerabilityDetail = () => {
  const { id } = useParams();
  const [vulnerability, setVulnerability] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchVulnerability = async () => {
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get(
          `http://localhost:3012/cve/vulnerabilities/${id}`,
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
            withCredentials: true,
          }
        );
        setVulnerability(response.data);
      } catch (error) {
        console.error("Error fetching vulnerability:", error);
        setError(error);
      }
    };

    fetchVulnerability();
  }, [id]);

  if (error) {
    return <p>Error fetching vulnerability: {error.message}</p>;
  }

  if (!vulnerability) {
    return <p>Loading...</p>;
  }

  const cpeNameUsed = vulnerability.cpeNameUsed || [];

  // ประมวลผล mitigationAdvice
  const mitigationAdvice = vulnerability.mitigationAdvice || "";
  const cleanedAdvice = mitigationAdvice.replace(/\*/g, ""); // ลบเครื่องหมาย * ทั้งหมด
  const adviceLines = cleanedAdvice
    .split("\n")
    .map((line) => line.trim())
    .filter((line) => line !== "");

  return (
    <ConfigProvider
      theme={{
        algorithm: theme.defaultAlgorithm,
        token: {
          colorPrimary: "#1890ff",
          borderRadius: 5,
          colorBgContainer: "#ffffff",
          colorTextBase: "#1f1f1f",
        },
      }}
    >
      <div style={{ padding: "20px" }}>
        <Card
          style={{
            backgroundColor: "#fff",
            color: "#1f1f1f",
          }}
          bodyStyle={{ padding: "20px" }}
        >
          {/* ID and Title */}
          <Title level={3}>
            {vulnerability.cveId} - {vulnerability.riskLevel}
          </Title>
          <Paragraph>
            <Link
              href={`https://nvd.nist.gov/vuln/detail/${vulnerability.cveId}`}
              target="_blank"
            >
              View on NVD
            </Link>
          </Paragraph>

          <Divider />

          {/* General Information */}
          <Row gutter={[16, 16]}>
            <Col xs={24} md={12}>
              <Paragraph>
                <Text strong>Operating System:</Text>{" "}
                {`${vulnerability.operating_system} ${vulnerability.os_version}`}
              </Paragraph>
              <Paragraph>
                <Text strong>CVSS Score ({vulnerability.cvssVersion}):</Text>{" "}
                {vulnerability.cvssScore !== undefined &&
                vulnerability.cvssScore !== null
                  ? `${vulnerability.cvssScore}`
                  : "No CVSS Score available"}
              </Paragraph>
              <Paragraph>
                <Text strong>Risk Level:</Text>{" "}
                <Text
                  type={
                    vulnerability.riskLevel !== "Unknown"
                      ? "danger"
                      : "secondary"
                  }
                >
                  {vulnerability.riskLevel !== "Unknown"
                    ? vulnerability.riskLevel
                    : "No Risk Level available"}
                </Text>
              </Paragraph>
            </Col>
            <Col xs={24} md={12}>
              <Paragraph>
                <Text strong>Published:</Text>{" "}
                {moment(vulnerability.published).isValid()
                  ? moment(vulnerability.published).format("YYYY-MM-DD")
                  : "Invalid Date"}
              </Paragraph>
              <Paragraph>
                <Text strong>Last Modified:</Text>{" "}
                {moment(vulnerability.lastModified).isValid()
                  ? moment(vulnerability.lastModified).format("YYYY-MM-DD")
                  : "Invalid Date"}
              </Paragraph>
            </Col>
          </Row>

          <Divider />

          {/* Description */}
          <Title level={4}>Description</Title>
          <Paragraph>
            {vulnerability.descriptions.find((desc) => desc.lang === "en")
              ?.value || "No description available"}
          </Paragraph>

          <Divider />

          {/* Configuration */}
          <Title level={4}>Configuration</Title>
          <List
            dataSource={vulnerability.configurations}
            renderItem={(config) => {
              const isMatch = cpeNameUsed.some((cpe) =>
                config.criteria.includes(cpe)
              );

              return (
                <List.Item>
                  <Text style={{ color: isMatch ? "#FF6666" : "" }}>
                    {config.criteria || "No Criteria Available"}
                  </Text>
                </List.Item>
              );
            }}
          />

          <Divider />

          {/* Mitigation Advice */}
          <Title level={4}>Mitigation Advice</Title>
          {adviceLines.length > 0 ? (
            <>
              {/* แสดงคำแนะนำเบื้องต้น */}
              <Paragraph>{adviceLines[0]}</Paragraph>
              {/* แสดงขั้นตอนเป็นรายการ */}
              <List
                dataSource={adviceLines.slice(1)}
                renderItem={(item, index) => (
                  <List.Item>
                    <Text>{`${index + 1}. ${item}`}</Text>
                  </List.Item>
                )}
              />
            </>
          ) : (
            <Text>No mitigation advice available</Text>
          )}
        </Card>
      </div>
    </ConfigProvider>
  );
};

export default VulnerabilityDetail;