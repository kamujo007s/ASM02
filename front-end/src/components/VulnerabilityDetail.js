import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import axios from "axios";
import { Card, ConfigProvider, theme, List, Descriptions, Typography, Row, Col } from "antd";
import moment from "moment";

const { Title, Text, Link } = Typography;

const VulnerabilityDetail = () => {
  const { id } = useParams();
  const [vulnerability, setVulnerability] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchVulnerability = async () => {
      try {
        const token = localStorage.getItem('token'); // หรือ sessionStorage.getItem('token')
        const response = await axios.get(`http://localhost:3012/cve/vulnerabilities/${id}`, {
          headers: {
            Authorization: `Bearer ${token}` // เพิ่ม token ใน headers
          }
        });
        setVulnerability(response.data);
      } catch (error) {
        console.error('Error fetching vulnerability:', error);
        setError(error);
      }
    };

    fetchVulnerability();
  }, [id]);

  if (error) {
    return <p>Error fetching vulnerability: {error.message}</p>;
  }

  if (!vulnerability) {
    return <p>Loading...</p>;
  }

  return (
    <ConfigProvider
      theme={{
        algorithm: theme.defaultAlgorithm,
        token: {
          colorPrimary: "#1890ff",
          borderRadius: 5,
          colorBgContainer: "#ffffff",
          colorTextBase: "#1f1f1f",
        },
      }}
    >
      <div style={{ padding: "20px" }}>
        <Card
          style={{
            marginTop: "20px",
            backgroundColor: "#fff",
            color: "#1f1f1f",
          }}
          bodyStyle={{ padding: "20px" }}
        >
          <Row gutter={[16, 16]}>
            <Col xs={24} md={12}>
              <Descriptions bordered column={1} size="middle">
                <Descriptions.Item label="ID">
                  <Link href={`https://nvd.nist.gov/vuln/detail/${vulnerability.cveId}`} target="_blank">
                    {vulnerability.cveId}
                  </Link>
                </Descriptions.Item>
                <Descriptions.Item label="Operating System">
                  {`${vulnerability.operating_system} ${vulnerability.os_version}`}
                </Descriptions.Item>
                <Descriptions.Item label={`CVSS Score ${vulnerability.cvssVersion}`}>
                  {vulnerability.cvssScore !== undefined && vulnerability.cvssScore !== null
                    ? `${vulnerability.cvssScore}`
                    : "No CVSS Score available"}
                </Descriptions.Item>
                <Descriptions.Item label="Risk Level">
                  <Text type={vulnerability.riskLevel !== "Unknown" ? "danger" : "secondary"}>
                    {vulnerability.riskLevel !== "Unknown"
                      ? vulnerability.riskLevel
                      : "No Risk Level available"}
                  </Text>
                </Descriptions.Item>
                <Descriptions.Item label="Published">
                  {moment(vulnerability.published).isValid()
                    ? moment(vulnerability.published).format("YYYY-MM-DD")
                    : "Invalid Date"}
                </Descriptions.Item>
                <Descriptions.Item label="Last Modified">
                  {moment(vulnerability.lastModified).isValid()
                    ? moment(vulnerability.lastModified).format("YYYY-MM-DD")
                    : "Invalid Date"}
                </Descriptions.Item>
              </Descriptions>
            </Col>
            <Col xs={24} md={12}>
              <Descriptions bordered column={1} size="middle">
                <Descriptions.Item label="Description">
                  {vulnerability.descriptions.find((desc) => desc.lang === "en")
                    ?.value || "No description available"}
                </Descriptions.Item>
                <Descriptions.Item label="Configuration">
                  <List
                    dataSource={vulnerability.configurations}
                    renderItem={(config) => (
                      <List.Item>
                        <List.Item.Meta
                          description={config.criteria || "No Criteria Available"}
                        />
                      </List.Item>
                    )}
                  />
                </Descriptions.Item>
              </Descriptions>
            </Col>
          </Row>
        </Card>
      </div>
    </ConfigProvider>
  );
};

export default VulnerabilityDetail;