// VulnerabilityTable.js
import React, { useState, useEffect } from "react";
import axios from "axios";
import moment from "moment";

const VulnerabilityTable = () => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [keyword, setKeyword] = useState("");
  const [os, setOs] = useState("");
  const [version, setVersion] = useState("");
  const [uniqueOs, setUniqueOs] = useState([]);
  const [versionsByOs, setVersionsByOs] = useState({});
  const [riskLevel, setRiskLevel] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(50);
  const [totalPages, setTotalPages] = useState(1);
  const [totalCount, setTotalCount] = useState(0);
  const [expandedConfigs, setExpandedConfigs] = useState({});

  useEffect(() => {
    fetchVulnerabilities();
    fetchOsAndVersions();
  }, [currentPage, itemsPerPage, riskLevel]);

  const fetchVulnerabilities = async () => {
    try {
      const response = await axios.get("/cve/vulnerabilities", {
        params: {
          keyword,
          operating_system: os,
          os_version: version,
          riskLevel,
          page: currentPage,
          limit: itemsPerPage,
        },
      });
      setVulnerabilities(response.data.mappedVulnerabilities);
      setTotalPages(Math.ceil(response.data.totalCount / itemsPerPage));
      setTotalCount(response.data.totalCount);
      console.log(response.data.configurations);
    } catch (error) {
      console.error("Error fetching vulnerabilities:", error);
    }
  };
  const toggleConfigExpansion = (id) => {
    setExpandedConfigs(prev => ({
      ...prev,
      [id]: !prev[id]
    }));
  };

  const fetchOsAndVersions = async () => {
    try {
      const response = await axios.get("/cve/assets/os-versions");
      setUniqueOs(response.data.uniqueOs);
      setVersionsByOs(response.data.versionsByOs);
    } catch (error) {
      console.error("Error fetching OS and versions:", error);
    }
  };

  const handleRiskLevelChange = (level) => {
    setRiskLevel(level);
    setCurrentPage(1);
    fetchVulnerabilities();
  };

  const handleSearch = async () => {
    setCurrentPage(1);
    await fetchVulnerabilities();
  };

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const handleItemsPerPageChange = (e) => {
    setItemsPerPage(parseInt(e.target.value, 10));
    setCurrentPage(1);
  };

  const renderPagination = () => {
    const pageNumbers = [];
    const maxPageButtons = 5;

    let startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
    let endPage = Math.min(totalPages, startPage + maxPageButtons - 1);

    if (endPage - startPage < maxPageButtons - 1) {
      startPage = Math.max(1, endPage - maxPageButtons + 1);
    }

    for (let i = startPage; i <= endPage; i++) {
      pageNumbers.push(
        <button
          key={i}
          onClick={() => handlePageChange(i)}
          className={`btn ${
            currentPage === i ? "btn-primary" : "btn-secondary"
          } mx-1`}
        >
          {i}
        </button>
      );
    }

    return (
      <div className="pagination">
        {startPage > 1 && (
          <button
            onClick={() => handlePageChange(1)}
            className="btn btn-secondary mx-1"
          >
            First
          </button>
        )}
        {pageNumbers}
        {endPage < totalPages && (
          <button
            onClick={() => handlePageChange(totalPages)}
            className="btn btn-secondary mx-1"
          >
            Last
          </button>
        )}
      </div>
    );
  };

  return (
    <div className="container mt-5">
      <div className="card">
        <div
          className="card-header text-white"
          style={{ backgroundColor: "#0047BB" }}
        >
          Vulnerability Table
        </div>
        <div className="card-body">
          <div className="form-inline mb-4">
            <div className="form-group mr-2">
              <label htmlFor="keyword" className="mr-2">
                Search
              </label>
              <input
                type="text"
                className="form-control"
                id="keyword"
                value={keyword}
                onChange={(e) => setKeyword(e.target.value)}
              />
            </div>
            <div className="form-group mr-2">
              <label htmlFor="os" className="mr-2">
                Operating System
              </label>
              <select
                className="form-control"
                id="os"
                value={os}
                onChange={(e) => {
                  setOs(e.target.value);
                  setVersion("");
                }}
              >
                <option value="">All</option>
                {uniqueOs.map((osItem) => (
                  <option key={osItem} value={osItem}>
                    {osItem}
                  </option>
                ))}
              </select>
            </div>
            <div className="form-group mr-2">
              <label htmlFor="version" className="mr-2">
                Version
              </label>
              <select
                className="form-control"
                id="version"
                value={version}
                onChange={(e) => setVersion(e.target.value)}
                disabled={!os}
              >
                <option value="">All</option>
                {versionsByOs[os]?.map((versionItem) => (
                  <option key={versionItem} value={versionItem}>
                    {versionItem}
                  </option>
                ))}
              </select>
            </div>
            <button onClick={handleSearch} className="btn btn-primary">
              Filter
            </button>
          </div>

          {/* Risk Level Buttons */}
          <div className="mb-4">
            <button
              onClick={() => handleRiskLevelChange("")}
              className={`btn ${
                riskLevel === "" ? "btn-primary" : "btn-secondary"
              } mx-1`}
            >
              All
            </button>
            <button
              onClick={() => handleRiskLevelChange("None")}
              className={`btn ${
                riskLevel === "None" ? "btn-primary" : "btn-secondary"
              } mx-1`}
            >
              None
            </button>
            <button
              onClick={() => handleRiskLevelChange("Low")}
              className={`btn ${
                riskLevel === "Low" ? "btn-primary" : "btn-secondary"
              } mx-1`}
            >
              Low
            </button>
            <button
              onClick={() => handleRiskLevelChange("Medium")}
              className={`btn ${
                riskLevel === "Medium" ? "btn-primary" : "btn-secondary"
              } mx-1`}
            >
              Medium
            </button>
            <button
              onClick={() => handleRiskLevelChange("High")}
              className={`btn ${
                riskLevel === "High" ? "btn-primary" : "btn-secondary"
              } mx-1`}
            >
              High
            </button>
            <button
              onClick={() => handleRiskLevelChange("Critical")}
              className={`btn ${
                riskLevel === "Critical" ? "btn-primary" : "btn-secondary"
              } mx-1`}
            >
              Critical
            </button>
          </div>

          <div className="form-inline mb-4">
            <label htmlFor="itemsPerPage" className="mr-2">
              Items per page
            </label>
            <select
              id="itemsPerPage"
              className="form-control"
              value={itemsPerPage}
              onChange={handleItemsPerPageChange}
            >
              <option value={50}>50</option>
              <option value={100}>100</option>
              <option value={200}>200</option>
            </select>
          </div>

          <div className="mb-4">
            <strong>
              Showing {vulnerabilities.length} of {totalCount} vulnerabilities
            </strong>
          </div>

          {vulnerabilities.length > 0 ? (
            vulnerabilities.map((item) => (
              <div key={item._id} className="card mb-4">
                <div className="card-body">
                  <h3>{item.assetName}</h3>
                  <div>
                    <strong>ID:</strong>{" "}
                    <a
                      href={`https://nvd.nist.gov/vuln/detail/${item.cveId}`}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      {item.cveId}
                    </a>
                  </div>
                  <div>
                    <strong>Operating System:</strong>{" "}
                    {`${item.operating_system} ${item.os_version}`}
                  </div>
                  <div>
                    <strong>CVSS Score {`${item.cvssVersion}`}: </strong>
                    {item.cvssScore !== "N/A"
                      ? item.cvssScore
                      : "No CVSS Score available"}
                  </div>
                  <div>
                    <strong>Risk Level: </strong>
                    <span className={`risk-level ${item.riskLevel}`}>
                      {item.riskLevel !== "Unknown"
                        ? item.riskLevel
                        : "No Risk Level available"}
                    </span>
                  </div>
                  <div>
                    <strong>Description: </strong>
                    {item.descriptions.find((desc) => desc.lang === "en")
                      ?.value || "No description available"}
                  </div>
                  <div>
                    <strong>Configuration: </strong>
                    <button 
                      className="btn btn-link" 
                      onClick={() => toggleConfigExpansion(item._id)}
                    >
                      {expandedConfigs[item._id] ? 'Hide' : 'Show'} ({item.configurations.length})
                    </button>
                    {expandedConfigs[item._id] && (
                      <ul className="list-group mt-2">
                        {item.configurations.map((config, index) => (
                          <li key={config.matchCriteriaId || index} className="list-group-item">
                            <strong>Criteria:</strong> {config.criteria}
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                  <div>
                    <strong>Published: </strong>
                    {moment(item.published).isValid()
                      ? moment(item.published).format("YYYY-MM-DD")
                      : "Invalid Date"}
                  </div>
                  <div>
                    <strong>Last Modified: </strong>
                    {moment(item.lastModified).isValid()
                      ? moment(item.lastModified).format("YYYY-MM-DD")
                      : "Invalid Date"}
                  </div>
                </div>
              </div>
            ))
          ) : (
            <p>No vulnerabilities found.</p>
          )}

          {renderPagination()}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityTable;

