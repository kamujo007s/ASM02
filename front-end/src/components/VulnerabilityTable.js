// VulnerabilityTable.js
import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { Table, Input, Select, Pagination, Spin, Form, Row, Col, Card, ConfigProvider, theme, message } from 'antd';

const VulnerabilityTable = () => {
  const { auth } = useContext(AuthContext);
  const navigate = useNavigate();
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [keyword, setKeyword] = useState("");
  const [os, setOs] = useState("");
  const [version, setVersion] = useState("");
  const [uniqueOs, setUniqueOs] = useState([]);
  const [versionsByOs, setVersionsByOs] = useState({});
  const [selectedRiskLevel, setSelectedRiskLevel] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(50);
  const [totalPages, setTotalPages] = useState(1);
  const [totalCount, setTotalCount] = useState(0);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!auth.isAuthenticated && !auth.loading) {
      navigate('/login');
    }
  }, [auth.isAuthenticated, auth.loading, navigate]);

  useEffect(() => {
    if (auth.isAuthenticated) {
      fetchVulnerabilities();
      fetchOsAndVersions();
    }
    // eslint-disable-next-line
  }, [currentPage, itemsPerPage, selectedRiskLevel, os, version, auth.isAuthenticated]);

  const fetchVulnerabilities = async () => {
    setLoading(true);
    try {
      const response = await axios.get('http://localhost:3012/cve/vulnerabilities', {
        params: {
          keyword,
          operating_system: os,
          os_version: version,
          riskLevel: selectedRiskLevel,
          page: currentPage,
          limit: itemsPerPage,
        },
        withCredentials: true, // ส่งคุกกี้ไปพร้อมกับคำขอ
      });

      setVulnerabilities(response.data.mappedVulnerabilities);
      setTotalCount(response.data.totalCount);
      setTotalPages(Math.ceil(response.data.totalCount / itemsPerPage));
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error);
      if (error.response && (error.response.status === 401 || error.response.status === 403)) {
        message.error('Session expired. Please login again.');
        navigate('/login');
      } else {
        message.error('Failed to fetch vulnerabilities.');
      }
    } finally {
      setLoading(false);
    }
  };

  const fetchOsAndVersions = async () => {
    try {
      const response = await axios.get('http://localhost:3012/cve/assets/os-versions', {
        withCredentials: true, // ส่งคุกกี้ไปพร้อมกับคำขอ
      });

      // กรองค่า undefined หรือ null ออกไป
      const filteredUniqueOs = response.data.uniqueOs.filter(os => os);
      setUniqueOs(filteredUniqueOs);

      const filteredVersionsByOs = {};
      for (const osKey in response.data.versionsByOs) {
        if (osKey) {
          filteredVersionsByOs[osKey] = response.data.versionsByOs[osKey].filter(version => version);
        }
      }
      setVersionsByOs(filteredVersionsByOs);

    } catch (error) {
      console.error('Error fetching OS and versions:', error);
      message.error('Failed to fetch OS and versions.');
    }
  };

  const handleRiskLevelChange = (value) => {
    setSelectedRiskLevel(value);
    setCurrentPage(1);
  };

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const handleItemsPerPageChange = (value) => {
    setItemsPerPage(value);
    setCurrentPage(1);
  };

  const navigateToDetail = (cveId) => {
    navigate(`/vulnerabilities/${cveId}`);
  };

  const truncateDescription = (description, maxLength) => {
    if (description.length > maxLength) {
      return description.substring(0, maxLength) + '...';
    }
    return description;
  };

  const getRiskLevelStyle = (riskLevel) => {
    switch (riskLevel) {
      case 'Low':
        return { backgroundColor: '#d4edda', color: '#155724', padding: '2px 5px', borderRadius: '3px' };
      case 'Medium':
        return { backgroundColor: '#fff3cd', color: '#856404', padding: '2px 5px', borderRadius: '3px' };
      case 'High':
        return { backgroundColor: '#f8d7da', color: '#d9534f', padding: '2px 5px', borderRadius: '3px' };
      case 'Critical':
        return { backgroundColor: '#f5c6cb', color: '#c9302c', padding: '2px 5px', borderRadius: '3px' };
      case 'Unknown':
      default:
        return { backgroundColor: '#d1ecf1', color: '#0c5460', padding: '2px 5px', borderRadius: '3px' };
    }
  };

  if (auth.loading || loading) {
    return (
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
        <Spin size="large" />
      </div>
    );
  }

  return (
    <ConfigProvider
      theme={{
        algorithm: theme.defaultAlgorithm,
        token: {
          colorPrimary: "#1890ff",
          borderRadius: 5,
          colorBgContainer: "#ffffff",
          colorTextBase: "#1f1f1f",
        },
      }}
    >
      <div style={{ padding: "20px" }}>
        <Card
          title="Vulnerability Table"
          style={{
            marginTop: "20px",
            backgroundColor: "#fff",
            color: "#1f1f1f",
          }}
        >
          <Form layout="vertical">
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item label="Operating System">
                  <Select
                    value={os}
                    onChange={(value) => setOs(value)}
                    style={{ width: "100%" }}
                    placeholder="Select Operating System"
                  >
                    <Select.Option value="">All</Select.Option>
                    {uniqueOs.map((osItem, index) => (
                      osItem && (
                        <Select.Option key={osItem || index} value={osItem}>
                          {osItem}
                        </Select.Option>
                      )
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item label="Version">
                  <Select
                    value={version}
                    onChange={(value) => setVersion(value)}
                    disabled={!os}
                    style={{ width: "100%" }}
                    placeholder="Select Version"
                  >
                    <Select.Option value="">All</Select.Option>
                    {versionsByOs[os]?.map((versionItem, index) => (
                      versionItem && (
                        <Select.Option key={versionItem || index} value={versionItem}>
                          {versionItem}
                        </Select.Option>
                      )
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item label="Risk Level">
                  <Select
                    value={selectedRiskLevel}
                    onChange={handleRiskLevelChange}
                    style={{ width: "100%" }}
                    placeholder="Select Risk Level"
                  >
                    <Select.Option value="">All</Select.Option>
                    <Select.Option value="Low">Low</Select.Option>
                    <Select.Option value="Medium">Medium</Select.Option>
                    <Select.Option value="High">High</Select.Option>
                    <Select.Option value="Critical">Critical</Select.Option>
                    <Select.Option value="Unknown">Unknown</Select.Option>
                  </Select>
                </Form.Item>
              </Col>
            </Row>
          </Form>

          <div style={{ marginBottom: "20px", color: "#000" }}>
            <strong>
              Showing {vulnerabilities.length} of {totalCount} vulnerabilities
            </strong>
          </div>

          <Row gutter={16}>
            {vulnerabilities.length > 0 ? (
              vulnerabilities.map((item, index) => (
                item && (
                  <Col xs={24} sm={12} md={8} lg={8} xl={6} key={item._id || item.cveId || index}>
                    <Card
                      hoverable
                      style={{
                        marginBottom: "20px",
                        backgroundColor: "#f0f0f0",
                        color: "#000",
                        transition: "transform 0.3s",
                        height: "250px",
                        overflow: "hidden",
                        display: "flex",
                        flexDirection: "column",
                        justifyContent: "space-between",
                      }}
                      bodyStyle={{ padding: "15px" }}
                      onClick={() => navigateToDetail(item.cveId)}
                      onMouseEnter={(e) => e.currentTarget.style.transform = "scale(1.05)"}
                      onMouseLeave={(e) => e.currentTarget.style.transform = "scale(1)"}
                    >
                      <div>
                        <h3>{item.assetName}</h3>
                        <div>
                          <strong>ID:</strong>{" "}
                          <a
                            href={`https://nvd.nist.gov/vuln/detail/${item.cveId}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            style={{ color: "#fa8c16" }}
                          >
                            {item.cveId}
                          </a>
                        </div>
                        <div>
                          <strong>Operating System:</strong>{" "}
                          {`${item.operating_system}`}
                        </div>
                        <div>
                          <strong>CVSS Score {`${item.cvssVersion}`}: </strong>
                          {item.cvssScore !== undefined && item.cvssScore !== null
                            ? item.cvssScore
                            : "N/A"}
                        </div>
                        <div>
                          <strong>Risk Level: </strong>
                          <span style={getRiskLevelStyle(item.riskLevel)}>
                            {item.riskLevel !== "Unknown"
                              ? item.riskLevel
                              : "N/A"}
                          </span>
                        </div>
                        <div style={{ maxHeight: "60px", overflow: "hidden", textOverflow: "ellipsis" }}>
                          <strong>Description: </strong>
                          {truncateDescription(item.descriptions.find((desc) => desc.lang === "en")?.value || "No description available", 100)}
                        </div>
                      </div>
                    </Card>
                  </Col>
                )
              ))
            ) : (
              <p>No vulnerabilities found.</p>
            )}
          </Row>

          <Pagination
            current={currentPage}
            total={totalCount}
            pageSize={itemsPerPage}
            onChange={handlePageChange}
            showSizeChanger
            onShowSizeChange={(current, size) => handleItemsPerPageChange(size)}
            style={{ textAlign: "center", marginTop: "20px" }}
          />
        </Card>
      </div>
    </ConfigProvider>
  );
};

export default VulnerabilityTable;