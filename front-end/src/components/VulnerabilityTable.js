import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useLocation } from 'react-router-dom';
import { Card, Row, Col, Form, Select, Button, Pagination, ConfigProvider, theme } from 'antd';
import moment from 'moment';

const VulnerabilityTable = () => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [keyword, setKeyword] = useState("");
  const [os, setOs] = useState("");
  const [version, setVersion] = useState("");
  const [uniqueOs, setUniqueOs] = useState([]);
  const [versionsByOs, setVersionsByOs] = useState({});
  const [selectedRiskLevel, setSelectedRiskLevel] = useState(""); // เลือกได้เพียงค่าเดียว
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(50);
  const [totalPages, setTotalPages] = useState(1);
  const [totalCount, setTotalCount] = useState(0);
  const [expandedConfigs, setExpandedConfigs] = useState({});

  const location = useLocation();

  useEffect(() => {
    const params = new URLSearchParams(location.search);
  }, [currentPage, itemsPerPage, selectedRiskLevel, os, version]);

  useEffect(() => {
    fetchVulnerabilities();
    fetchOsAndVersions();
  }, [currentPage, itemsPerPage, selectedRiskLevel, os, version]);

  const fetchVulnerabilities = async () => {
    try {
      const token = localStorage.getItem('token'); // หรือ sessionStorage.getItem('token')
      const response = await axios.get('http://192.168.123.180:3012/cve/vulnerabilities', {
        headers: {
          Authorization: `Bearer ${token}` // เพิ่ม token ใน headers
        },
        params: {
          keyword,
          operating_system: os,
          os_version: version,
          riskLevel: selectedRiskLevel,
          page: currentPage,
          limit: itemsPerPage,
        },
      });

      setVulnerabilities(response.data.mappedVulnerabilities);
      setTotalCount(response.data.totalCount);
      setTotalPages(Math.ceil(response.data.totalCount / itemsPerPage));
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error);
    }
  };

  const fetchOsAndVersions = async () => {
    try {
      const token = localStorage.getItem('token'); // หรือ sessionStorage.getItem('token')
      const response = await axios.get('http://192.168.123.180:3012/cve/assets/os-versions', {
        headers: {
          Authorization: `Bearer ${token}` // เพิ่ม token ใน headers
        }
      });

      setUniqueOs(response.data.uniqueOs);
      setVersionsByOs(response.data.versionsByOs);
    } catch (error) {
      console.error('Error fetching OS and versions:', error);
    }
  };

  const handleRiskLevelChange = (value) => {
    setSelectedRiskLevel(value);
    setCurrentPage(1);
  };

  const handlePageChange = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const handleItemsPerPageChange = (value) => {
    setItemsPerPage(value);
    setCurrentPage(1);
  };

  const toggleConfigExpansion = (id) => {
    setExpandedConfigs((prevExpandedConfigs) => ({
      ...prevExpandedConfigs,
      [id]: !prevExpandedConfigs[id],
    }));
  };

  return (
    <ConfigProvider
      theme={{
        algorithm: theme.defaultAlgorithm,
        token: {
          colorPrimary: "#1890ff",
          borderRadius: 5,
          colorBgContainer: "#ffffff",
          colorTextBase: "#1f1f1f",
        },
      }}
    >
      <div style={{ padding: "20px" }}>
        <Card
          title="Vulnerability Table"
          style={{
            marginTop: "20px",
            backgroundColor: "#fff",
            color: "#1f1f1f",
          }}
        >
          <Form layout="vertical">
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item label="Operating System">
                  <Select
                    value={os}
                    onChange={(value) => setOs(value)}
                    style={{ width: "100%" }}
                  >
                    <Select.Option value="">All</Select.Option>
                    {uniqueOs.map((osItem) => (
                      <Select.Option key={osItem} value={osItem}>
                        {osItem}
                      </Select.Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item label="Version">
                  <Select
                    value={version}
                    onChange={(value) => setVersion(value)}
                    disabled={!os}
                    style={{ width: "100%" }}
                  >
                    <Select.Option value="">All</Select.Option>
                    {versionsByOs[os]?.map((versionItem) => (
                      <Select.Option key={versionItem} value={versionItem}>
                        {versionItem}
                      </Select.Option>
                    ))}
                  </Select>
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item label="Risk Level">
                  <Select
                    value={selectedRiskLevel}
                    onChange={handleRiskLevelChange}
                    style={{ width: "100%" }}
                  >
                    <Select.Option value="">All</Select.Option>
                    <Select.Option value="Low">Low</Select.Option>
                    <Select.Option value="Medium">Medium</Select.Option>
                    <Select.Option value="High">High</Select.Option>
                    <Select.Option value="Critical">Critical</Select.Option>
                    <Select.Option value="Unknown">Unknown</Select.Option>
                  </Select>
                </Form.Item>
              </Col>
            </Row>
          </Form>

          <div style={{ marginBottom: "20px", color: "#000" }}>
            <strong>
              Showing {vulnerabilities.length} of {totalCount} vulnerabilities
            </strong>
          </div>

          {vulnerabilities.length > 0 ? (
            vulnerabilities.map((item) => (
              <Card
                key={item._id}
                style={{
                  marginBottom: "20px",
                  backgroundColor: "#f0f0f0",
                  color: "#000",
                }}
              >
                <h3>{item.assetName}</h3>
                <div>
                  <strong>ID:</strong>{" "}
                  <a
                    href={`https://nvd.nist.gov/vuln/detail/${item.cveId}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    style={{ color: "#fa8c16" }}
                  >
                    {item.cveId}
                  </a>
                </div>
                <div>
                  <strong>Operating System:</strong>{" "}
                  {`${item.operating_system}`}
                </div>
                <div>
                  <strong>CVSS Score {`${item.cvssVersion}`}: </strong>
                  {item.cvssScore !== undefined && item.cvssScore !== null
                    ? item.cvssScore
                    : "No CVSS Score available"}
                </div>
                <div>
                  <strong>Risk Level: </strong>
                  <span>
                    {item.riskLevel !== "Unknown"
                      ? item.riskLevel
                      : "No Risk Level available"}
                  </span>
                </div>
                <div>
                  <strong>Description: </strong>
                  {item.descriptions.find((desc) => desc.lang === "en")
                    ?.value || "No description available"}
                </div>
                <div>
                  <strong>Configuration: </strong>
                  <Button
                    type="link"
                    onClick={() => toggleConfigExpansion(item._id)}
                  >
                    {expandedConfigs[item._id] ? "Hide" : "Show"} (
                    {item.configurations.length})
                  </Button>
                  {expandedConfigs[item._id] && (
                    <ul>
                      {item.configurations.length > 0 ? (
                        item.configurations.map((config, index) => (
                          <li key={config.matchCriteriaId || index}>
                            <strong>Criteria:</strong>{" "}
                            {config.criteria || "No Criteria Available"}
                          </li>
                        ))
                      ) : (
                        <li>No Configuration Available</li>
                      )}
                    </ul>
                  )}
                </div>

                <div>
                  <strong>Published: </strong>
                  {moment(item.published).isValid()
                    ? moment(item.published).format("YYYY-MM-DD")
                    : "Invalid Date"}
                </div>
                <div>
                  <strong>Last Modified: </strong>
                  {moment(item.lastModified).isValid()
                    ? moment(item.lastModified).format("YYYY-MM-DD")
                    : "Invalid Date"}
                </div>
              </Card>
            ))
          ) : (
            <p>No vulnerabilities found.</p>
          )}

          <Pagination
            current={currentPage}
            total={totalCount}
            pageSize={itemsPerPage}
            onChange={handlePageChange}
            showSizeChanger
            onShowSizeChange={(current, size) => handleItemsPerPageChange(size)}
            style={{ textAlign: "center", marginTop: "20px" }}
          />
        </Card>
      </div>
    </ConfigProvider>
  );
};

export default VulnerabilityTable;